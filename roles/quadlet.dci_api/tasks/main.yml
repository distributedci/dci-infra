---
- name: HAProxy conf for dci-api
  block:
    - name: Load HAProxy role handlers
      ansible.builtin.import_role:
        name: quadlet.haproxy
        tasks_from: noop
        handlers_from: main

    - name: Render the HAproxy backend
      ansible.builtin.template:
        src: haproxy_backend.cfg.j2
        dest: "{{ haproxy_config_dir }}/10_backend_dci_api.cfg"
        mode: '0640'
      notify:
        - Reload haproxy

- name: Create container env directory
  ansible.builtin.file:
    path: /etc/dci-api/
    mode: '0750'
    state: directory

- name: Create container env configuration
  ansible.builtin.template:
    src: dci-api.env.j2
    dest: /etc/dci-api/dci-api.env
    mode: '0640'
  notify:
    - Restart dci-api

- name: Create the required amount of containers
  vars:
    _quadlet: dci-api
    _config: "{{ dci_api_container_spec }}"
  block:
    - name: Pull image
      containers.podman.podman_image:
        name: "{{ _config.image }}"
        force: true
      notify:
        - Run yolo backup with 'current' tag
        - Restart dci-api

    - name: Create container quadlet
      ansible.builtin.template:
        src: "global.container.j2"
        dest: "/etc/containers/systemd/{{ _quadlet }}@.container"
        mode: '0640'
      notify:
        - Restart dci-api

    - name: Get count of configured containers
      ansible.builtin.find:
        paths: /etc/containers/systemd/
        patterns: "{{ _quadlet }}@*.container"
        file_type: link
      register: _container_units_found

    - name: Remove over-scale containers
      when: _container_units_found.matched > dci_api_container_scale
      block:
        - name: Remove over-scale unit files
          ansible.builtin.file:
            dest: /etc/containers/systemd/{{ _quadlet }}@{{ item }}.quadlet
            state: absent
          loop: "{{ range(dci_api_container_scale, _container_units_found.matched) | list }}"

        - name: Stop over-scale services
          ansible.builtin.systemd:
            name: "{{ _quadlet }}@{{ item }}.service"
            state: stopped
            daemon-reload: true
          ignore_errors: "{{ ansible_check_mode }}"
          loop: "{{ range(dci_api_container_scale, _container_units_found.matched) | list }}"

    - name: Allow to perfom the database backup & restart the current containers before the next task which starts the service
      ansible.builtin.meta: flush_handlers

    - name: Ensure all required services are started
      ansible.builtin.systemd:
        name: "{{ _quadlet }}@{{ item }}.service"
        state: started
        daemon-reload: true
      ignore_errors: "{{ ansible_check_mode }}"
      loop: "{{ range(0, _config.scale) | list }}"

...
