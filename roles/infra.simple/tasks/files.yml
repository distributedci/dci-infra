---
- name: Create directory path from file list
  ansible.builtin.file:
    path: "{{ item.key | dirname }}"
    state: directory
    mode: "{{ item.value.dir_mode | default(omit) }}"
    owner: "{{ item.value.owner | default(omit) }}"
    group: "{{ item.value.group | default(omit) }}"
  loop: "{{ simple_files | ansible.builtin.dict2items }}"
  loop_control:
    label: "{{ item.key | dirname }}"

- name: Create (templated) files from file list
  vars:
    _params:
      skip: true
      files:
        - "{{ item.value.template }}"
      paths:
        - "{{ inventory_dir }}/templates/{{ inventory_hostname }}"
        - "{{ inventory_dir }}/templates/_"
  ansible.builtin.template:
    dest: "{{ item.key }}"
    src: "{{ lookup('first_found', _params) }}"
    mode: "{{ item.value.mode | default(omit) }}"
    owner: "{{ item.value.owner | default(omit) }}"
    group: "{{ item.value.group | default(omit) }}"
  loop: "{{ simple_files | ansible.builtin.dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.template is defined

- name: Create (static) files from file list
  vars:
    _params:
      skip: true
      files:
        - "{{ item.value.src }}"
      paths:
        - "{{ inventory_dir }}/files/{{ inventory_hostname }}"
        - "{{ inventory_dir }}/files/_"
  ansible.builtin.copy:
    dest: "{{ item.key }}"
    src: "{{ lookup('first_found', _params) }}"
    mode: "{{ item.value.mode | default(omit) }}"
    owner: "{{ item.value.owner | default(omit) }}"
    group: "{{ item.value.group | default(omit) }}"
  loop: "{{ simple_files | ansible.builtin.dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.src is defined

- name: Create (inline) files from file list
  ansible.builtin.copy:
    dest: "{{ item.key }}"
    content: "{{ item.value.content }}"
    mode: "{{ item.value.mode | default(omit) }}"
    owner: "{{ item.value.owner | default(omit) }}"
    group: "{{ item.value.group | default(omit) }}"
  loop: "{{ simple_files | ansible.builtin.dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.content is defined
...
