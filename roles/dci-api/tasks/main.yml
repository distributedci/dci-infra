# -*- encoding: utf-8 -*-
#
# Copyright 2015 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

---
- name: Gather OS specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "rhel-{{ ansible_distribution_major_version }}.yml"
    - "rhel-7.yml"
  tags:
    - dci-core

# Ensure the needed SELinux booleans are enabled
- name: Ensure the needed SELinux booleans are enabled
  seboolean:
    name: '{{ item }}'
    state: yes
    persistent: yes
  with_items:
    - httpd_can_network_connect
    - httpd_can_network_connect_db
    - httpd_execmem
  tags:
    - dci-core

- name: Enable SCL
  package:
    name: centos-release-scl
    state: present
  tags:
    - dci-core
  when: (ansible_distribution == "CentOS" or ansible_distribution == "RedHat") and ansible_distribution_major_version == '7'

# Ensure postgresql client tools are installed
- name: Ensure postgresql client tools installed
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ postgres_client_packages }}"
  tags:
    - dci-core

# Ensure a backup of the database is made before
# any update takes place
- name: List package updates
  package:
    list: updates
    update_cache: true
  register: rpmupdate
  tags:
    - dci-core

- name: Ensure backup is made
  shell: "{{ swiftbackmeup_command }}"
  when:
    - swiftbackmeup_modes is defined
    - "'dci-control-server' in rpmupdate.results|map(attribute='name')"
  tags:
    - dci-core

- name: Ensure apache user is part of DCI group
  user:
    name: apache
    append: yes
    groups: dci

# Install DCI-API
#
- name: Ensure DCI is installed
  package:
    name: dci-control-server
    state: latest
    update_cache: yes
  notify:
    - reload httpd
    - propagate event for dci-control-server upgraded as a fact
  tags:
    - dci-core

- name: Also trigger handlers when dci-control-server was upgraded in another play on the same host
  command: /bin/true
  notify:
    - reload httpd
  when:
    - dci_control_server_package_upgraded is defined and dci_control_server_package_upgraded
  tags:
    - dci-core

- name: Ensure DCI Client is installed
  package:
    name: "{{ dciclient_package }}"
    state: latest
    update_cache: yes
  tags:
    - dci-core

# This is a temporary fix to remove once
# I9db68725d6c8cd05fa50a9052abed206fd7811dc is
# merged.
- name: ensure dci-dbsync exists
  stat:
    path: /usr/bin/dci-dbsync
  register: dci_dbsync_state

- name: Pull dci-common for pre-I9db68725d6c8cd05fa50a9052abed206fd7811dc rpm
  package:
    name: dci-common
    state: latest
  when: dci_dbsync_state.stat.exists == False

# Install Repo certs to be able to generate client certificates
#
- name: Create SSL Directory
  file:
    path: '/etc/ssl/repo'
    state: directory
    recurse: yes
  tags:
    - dci-core

- name: Install Repo CA certs
  copy:
    content: "{{ repo_cacert }}"
    dest: "{{ repo_sslcacertfile }}"
  tags:
    - dci-core

- name: Install Repo CA key
  copy:
    content: "{{ repo_cakey }}"
    dest: "{{ repo_sslcakeyfile }}"
  tags:
    - dci-core

# Configure DCI-API configuration file
#
- name: Create dci-api settings file
  template:
    src: settings.py.j2
    dest: /etc/dci-api/settings.py
  notify:
    - reload httpd
  tags:
    - dci-core

- name: Create env files
  template:
    src: '{{ item }}.sh.j2'
    dest: '/etc/{{ item }}.sh'
    mode: 0400
  with_items:
    - dci_admin
    - dci_db
  tags:
    - dci-core

# Install DCI itself
#
- name: Check if db is already in place
  shell: "{{ dci_db_check_command }}"
  register: dbexist
  ignore_errors: yes
  tags:
    - dci-core

- name: Initiate db schema
  shell: >
    . /etc/dci_admin.sh &&
    dci-dbinit
  when: dbexist is failed
  tags:
    - dci-core

- name: Update the schema
  shell: >
    . /etc/dci_admin.sh &&
    dci-dbsync
  when: dbexist is success
  tags:
    - dci-core

- name: Ensure apache can write files for DCI
  file:
    path: '{{ store_file_path | default("/var/lib/dci-control-server/files") }}'
    state: directory
    owner: apache
    group: apache
    recurse: true
  when: store_engine == 'file'
  tags:
    - dci-core

# Configure DCI-API vhost
#
- name: Create vhost file
  template:
    src: dci_api.conf
    dest: /etc/httpd/conf.d/dci_api.conf
  notify:
    - reload httpd
  tags:
    - dci-core

- name: Add the swift purge components script
  cron:
    name: 'purge-swift'
    minute: '0'
    hour: '0'
    day: '1'
    month: '*'
    job: '/usr/bin/dci-purge-swift-components'
  tags:
    - dci-core

# Install UMB certs to be able to connect to umb.api.redhat.com
#
- name: Install UMB key file
  copy:
    content: "{{ umb_key }}"
    dest: "{{ umb_key_file_path }}"
  tags:
    - dci-core

- name: Install UMB crt file
  copy:
    content: "{{ umb_crt }}"
    dest: "{{ umb_crt_file_path }}"
  tags:
    - dci-core

- name: Install UMB ca file (RH-IT-Root-CA)
  copy:
    content: "{{ umb_ca }}"
    dest: "{{ umb_ca_file_path }}"
  tags:
    - dci-core
