# -*- encoding: utf-8 -*-
#
# Copyright 2015 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

---
- name: Gather OS specific variables (postgres)
  include_vars: "{{ item }}"
  with_first_found:
    - "rhel-{{ ansible_distribution_major_version }}.yml"
    - "rhel-7.yml"
  tags:
    - dci-core

- name: Enable SCL
  yum:
    name: centos-release-scl
    state: present
  tags:
    - dci-core
  when: (ansible_distribution == "CentOS" or ansible_distribution == "RedHat") and ansible_distribution_major_version == '7'

- name: Ensure PostgreSQL packages are installed
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ postgres_packages }}"
  tags:
    - dci-core

- name: Check if postgresql config is present
  stat:
    path: "{{ postgres_conf }}"
  register: new_pg_conf_file
  tags:
     - dci-core

- name: Initialize postgresql
  shell: "{{ postgres_init_cmd }}"
  tags:
     - dci-core
  when: not new_pg_conf_file.stat.exists

- name: Ensure PostgreSQL listen to all addresses
  lineinfile:
    dest: "{{ postgres_conf }}"
    regexp: "^listen_addresses = '*'"
    insertafter: '^#\s+-\s+Connection Settings'
    line: "listen_addresses = '*'"
  tags:
    - dci-core

- name: Include PostgreSQL memory configuration
  lineinfile:
    dest: "{{ postgres_conf }}"
    line: "include = 'memory.conf'"
  tags:
    - dci-core

- name: Write specific memory settings in memory.conf
  blockinfile:
    dest: "{{ postgres_mem_conf }}"
    create: yes
    owner: postgres
    group: postgres
    mode: 0600
    block: |
      shared_buffers = {{  (ansible_memtotal_mb * 0.25)|int }}MB
      effective_cache_size = {{  (ansible_memtotal_mb * 0.50)|int }}MB
  notify: restart postgresql
  tags:
    - dci-core

- name: Ensure user can identify with password authentication mechanisms
  lineinfile:
    dest: "{{ postgres_auth_conf }}"
    line: 'host    all             all  {{ item[0] }}/32            {{ item[1] }}'
    regex: '^host\s+all\s+all\s+{{ item[0] }}/32\s+{{ item[1] }}\s+$'
    insertafter: '^#\sIPv4\slocal.+'
  with_nested:
    - "{{ apiips | list }}"
    - [ 'password', 'md5' ]
  notify: restart postgresql
  tags:
    - dci-core

- name: Ensure user can identify with password authentication mechanisms
  lineinfile:
    dest: "{{ postgres_auth_conf }}"
    regexp: '^host\s+all\s+all\s+127\.0\.0\.1/32\s+{{ item }}\s+$'
    insertafter: '^#\sIPv4\slocal.+'
    line: "host    all             all  127.0.0.1/32            {{ item }}"
  with_items:
    - password
    - md5
  tags:
    - dci-core

- name: Ensure PostgreSQL service is started
  service:
    name: "{{ postgres_service }}"
    state: started
    enabled: yes
  tags:
    - dci-core
#
# Create DCI database and user
#
- name: ensure database is created
  postgresql_db:
    name: '{{ dbname }}'
  become: yes
  become_user: postgres
  tags:
    - dci-core

- name: ensure user has access to database
  postgresql_user:
    db: '{{ dbname }}'
    name: '{{ dbuser }}'
    password: '{{ dbpassword }}'
    priv: ALL
  become: yes
  become_user: postgres
  tags:
    - dci-core

- name: ensure user does not have unnecessary privilege
  postgresql_user:
    name: '{{ dbuser }}'
    role_attr_flags: SUPERUSER,CREATEDB
  become: yes
  become_user: postgres
  tags:
    - dci-core

- name: Apply firewalld configuration for PostgreSQL
  import_tasks: firewalld.yaml
  tags:
    - dci-core
