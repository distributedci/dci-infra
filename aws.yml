# -*- encoding: utf-8 -*-
# vim: set ft=yaml.ansible:
#
# Copyright 2024-2025 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

---
- name: Perform some sanity checks
  hosts: localhost
  vars:
    env_value: "{{ env | default('UNDEFINED', true) }}"
    env_group: "{{ env_value }}:&dci_ng"
    env_group_modifier: "&{{ env_group }}"
  tasks:
    - name: Validate argument_specs for the "env" variable
      ansible.builtin.validate_argument_spec:
        argument_spec: "{{ required_data }}"
      vars:
        required_data:
          env:
            description: The hostgroup that we must operate on (set with tag "env:<value>" in EC2 tags)
            type: str
            required: true

    - name: Verify that the "env" var is set
      ansible.builtin.assert:
        that: env_value != "UNDEFINED"
        fail_msg: "The 'env' var must be defined and set to a non-empty value and must be a non-empty hosts group!"
        success_msg: "'env' is defined and non-empty."

    - name: Verify that the hostgroup pointed by "env" is not empty
      ansible.builtin.assert:
        that: lookup("inventory_hostnames", env_group) | length > 0
        fail_msg: "The hostgroup named '{{ env_group }}' does not contain any hosts."
        success_msg: "Env hostgroup {{ env_group }} contains some hosts."

    - name: Verify that there's one host in the 'dci_database' group for this environment
      ansible.builtin.assert:
        that: "{{ lookup('inventory_hostnames', 'dci_database:{{ env_group_modifier }}') | length > 0 }}"
        fail_msg: "Host group 'dci_database:{{ env_group_modifier }}' does not contain any hosts. Can't continue."
        success_msg: |
          Hosts found in the dci_database:{{ env_group_modifier }} group: {{ lookup('inventory_hostnames', 'dci_database:{{ env_group_modifier }}') }}
  run_once: true

- name: Setup SNS/SQS for consuming LB logs
  hosts: localhost
  gather_facts: false
  become: false
  roles:
    - role: aws.lb_logs
      tags:
        - aws

- name: Base setup for AWS infra
  hosts: dci_ng
  gather_facts: true
  become: true

  roles:
    - role: infra.simple
      tags:
        - base

    - role: infra.node_exporter
      tags:
        - base
        - node_exporter

    - role: infra.quadlet
      tags:
        - base
        - podman

    - role: quadlet.podman_exporter
      tags:
        - base
        - podman

- name: Setup monitoring stack
  hosts: dci_prometheus:&dci_ng
  gather_facts: true
  become: true

  roles:
    - role: quadlet.prometheus
      tags:
        - podman
        - prometheus
        - monitoring

    - role: quadlet.alertmanager
      tags:
        - podman
        - alertmanager
        - monitoring

    - role: quadlet.grafana
      tags:
        - podman
        - grafana
        - monitoring

    - role: quadlet.blackbox_exporter
      tags:
        - podman
        - monitoring

    - role: quadlet.domain_exporter
      tags:
        - podman
        - monitoring

    - role: quadlet.nginx
      tags:
        - podman
        - nginx
        - monitoring

- name: Setup postgresql database
  hosts: dci_database:&dci_ng
  gather_facts: true
  become: true

  roles:
    - role: yolo_backup
      become_user: "{{ yolo_backup_user|default('dci') }}"
    - role: quadlet.postgresql
      tags:
        - postgresql
        - podman

- name: Setup haproxy
  hosts: dci_api:dci_doc:dci_ui:&dci_ng
  gather_facts: true
  become: true

  roles:
    - role: quadlet.haproxy
      tags:
        - haproxy
        - podman

- name: Setup DCI-API
  hosts: dci_api:&dci_ng
  gather_facts: true
  become: true

  tasks:
    - name: Import yolo_backup handlers
      ansible.builtin.import_role:
        # Include only the handler to run db backup before
        # updating dci-control-server/dci-api
        # It *needs* to be included *before* the quadlet.dci_api role so
        # that the handler can run before quadlet.dci_api handlers
        name: yolo_backup
        tasks_from: noop.yml
        handlers_from: delegated_backup.yml
      tags:
        - dci_api
        - dci_core
        - yolo_backup

    - name: Setup DCI-API containers
      ansible.builtin.import_role:
        name: quadlet.dci_api
      tags:
        - dci_api
        - dci_core
        - podman

    - name: Add statsd statsd_exporter
      ansible.builtin.import_role:
        name: quadlet.statsd_exporter
      tags:
        - dci_api
        - statsd
        - podman

- name: Setup DCI-DOC
  hosts: dci_doc:&dci_ng
  gather_facts: true
  become: true

  roles:
    - role: quadlet.dci_doc
      tags:
        - dci_doc
        - podman

- name: Setup DCI-UI
  hosts: dci_ui:&dci_ng
  gather_facts: true
  become: true

  roles:
    - role: quadlet.dci_ui
      tags:
        - dci_ui
        - podman

- name: Setup DCI-BLOG
  hosts: dci_blog:&dci_ng
  gather_facts: true
  become: true

  roles:
    - role: quadlet.dci_blog
      tags:
        - dci_blog
        - podman

- name: Setup DCI-PACKAGES
  hosts: dci_packages:&dci_ng
  gather_facts: true
  become: true

  roles:
    - role: haproxy_backend.dci_packages
      tags:
        - dci_packages
        - podman

- name: Setup haproxy DCI frontend
  hosts: dci_api:dci_doc:dci_ui:&dci_ng
  gather_facts: true
  become: true

  tasks:
    - name: Install haproxy
      ansible.builtin.import_role:
        name: quadlet.haproxy
        tasks_from: frontend_dci
      tags:
        - haproxy
        - podman
...
