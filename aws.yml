---
- name: Base setup for AWS infra
  hosts: dci_ng
  gather_facts: true
  become: true

  tasks:
    - name: SELinux tasks
      ansible.builtin.include_role:
        name: infra.simple
        tasks_from: selinux.yml
      tags:
        - base
        - selinux

    - name: Base OS tasks
      ansible.builtin.include_role:
        name: infra.simple
        tasks_from: base.yml
      tags:
        - base

    - name: Package base tasks
      ansible.builtin.include_role:
        name: infra.simple
        tasks_from: packages.yml
      tags:
        - base
        - packages

    - name: DCI base tasks
      ansible.builtin.include_role:
        name: infra.simple
        tasks_from: dci.yml
      tags:
        - base
        - dci

    - name: SSH base tasks
      ansible.builtin.include_role:
        name: infra.simple
        tasks_from: ssh.yml
      tags:
        - base
        - ssh

    - name: Firewall base tasks
      ansible.builtin.include_role:
        name: infra.simple
        tasks_from: firewall.yml
      tags:
        - base
        - firewall

    - name: Base containers
      vars:
        simple_quadlets:
          podman-exporter:
            image: quay.io/navidys/prometheus-podman-exporter:latest
            command: >
              --collector.image
              --collector.network
              --collector.pod
              --collector.volume
              --web.listen-address :{{ podman_exporter_port }}
            ports:
              - "{{ podman_exporter_port }}:{{ podman_exporter_port }}"
            user: root
            volumes:
              - "/run/podman/podman.sock:/run/podman/podman.sock:ro"
            security_labels:
              disable: true
            requires:
              - podman.socket
            env:
              CONTAINER_HOST: unix:///run/podman/podman.sock
            health:
              cmd: "/bin/wget --spider localhost:{{ podman_exporter_port }}/-/healthy"
      ansible.builtin.include_role:
        name: infra.simple
        tasks_from: containers.yml
      tags:
        - base
        - containers

- name: Setup monitoring stack
  hosts: dci_ng:&dci_prometheus
  gather_facts: true
  become: true
  vars:
    simple_groups:
      monitoring:
        system: true
        gid: "{{ monitoring_gid }}"
    simple_users:
      prometheus:
        uid: "{{ prometheus_uid }}"
        group: monitoring
        home: "{{ prometheus_db_dir }}"
      alertmanager:
        uid: "{{ alertmanager_uid }}"
        group: monitoring
        home: "{{ alertmanager_db_dir }}"
      grafana:
        uid: "{{ grafana_uid }}"
        group: monitoring
        home: "{{ grafana_data }}"

  tasks:
    - name: Create monitoring stack users
      ansible.builtin.include_role:
        name: infra.simple
        tasks_from: users.yml

    - name: Write nginx configuration
      vars:
        simple_files:
          /etc/nginx/proxy.conf:
            src: nginx-proxy.conf
          /etc/nginx/conf.d/default.conf:
            template: dci_prometheus/nginx.conf.j2
      ansible.builtin.include_role:
        name: infra.simple
        tasks_from: files.yml

    - name: Manage NGINX quadlets
      vars:
        simple_quadlets:
          nginx:
            image: docker.io/library/nginx:1-alpine
            ports:
              - "80:80"
            capabilities:
              - net_admin
            volumes:
              - /etc/nginx/conf.d:/etc/nginx/conf.d:Z,ro
              - /etc/nginx/proxy.conf:/etc/nginx/proxy.conf:Z,ro
            health:
              cmd: "/usr/bin/test -f /var/run/nginx.pid"
      ansible.builtin.include_role:
        name: infra.simple
        tasks_from: containers.yml

    - name: Write monitoring stack configuration files
      vars:
        simple_files:
          /etc/prometheus/aws.credentials:
            mode: '0640'
            owner: "{{ prometheus_uid }}"
            group: "{{ monitoring_gid }}"
            content: "{{ prometheus_aws_credentials | default('') }}"
          /etc/prometheus/prometheus.yml:
            template: dci_prometheus/prometheus.yml.j2
            owner: "{{ prometheus_uid }}"
            group: "{{ monitoring_gid }}"
          /etc/prometheus/rules.d/:  # recursively copy rules directory
            src: dci_prometheus/rules.d/
            owner: "{{ prometheus_uid }}"
            group: "{{ monitoring_gid }}"
          /etc/prometheus/blackbox.yml:
            src: dci_prometheus/blackbox.yml
            owner: "{{ prometheus_uid }}"
            group: "{{ monitoring_gid }}"
          /etc/alertmanager/alertmanager.yml:
            template: dci_prometheus/alertmanager.yml.j2
            owner: "{{ alertmanager_uid }}"
            group: "{{ monitoring_gid }}"
          /etc/alertmanager/templates/slack.tmpl:
            src: dci_prometheus/slack.tmpl
            owner: "{{ alertmanager_uid }}"
            group: "{{ monitoring_gid }}"
          /etc/grafana/grafana.ini:
            template: dci_prometheus/grafana.ini.j2
            owner: "{{ grafana_uid }}"
            group: "{{ monitoring_gid }}"
          /etc/grafana/provisioning/datasources/prometheus.yml:
            template: dci_prometheus/prometheus-datasource.yml.j2
            owner: "{{ grafana_uid }}"
            group: "{{ monitoring_gid }}"
      ansible.builtin.include_role:
        name: infra.simple
        tasks_from: files.yml

    - name: Run monitoring stack containers
      vars:
        simple_quadlets:
          prometheus:
            image: "quay.io/prometheus/prometheus:v{{ prometheus_version }}"
            user: "{{ prometheus_uid }}:{{ monitoring_gid }}"
            env_file: /etc/prometheus/aws.credentials
            command: >
              --config.file=/etc/prometheus/prometheus.yml
              --storage.tsdb.path=/prometheus
              --web.console.libraries=/usr/share/prometheus/console_libraries
              --web.console.templates=/usr/share/prometheus/consoles
              --web.listen-address={{ prometheus_web_listen_address }}
              --web.external-url={{ prometheus_web_external_url }}
              --web.route-prefix={{ prometheus_web_path }}
            ports:
              - "{{ prometheus_http_port }}:{{ prometheus_http_port }}"
            volumes:
              - /etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:Z,ro
              - /etc/prometheus/rules.d:/etc/prometheus/rules.d:Z,ro
              - "{{ prometheus_db_dir }}:/prometheus:z"
            health:
              cmd: "/bin/wget --spider localhost:{{ prometheus_http_port }}"
          blackbox:
            image: "quay.io/prometheus/blackbox-exporter:latest"
            user: "{{ prometheus_uid }}:{{ monitoring_gid }}"
            command:
              --config.file=/etc/blackbox_exporter/config.yml
              --web.listen-address={{ blackbox_web_listen_address }}
            ports:
              - "{{ blackbox_http_port }}:{{ blackbox_http_port }}"
            volumes:
              - /etc/prometheus/blackbox.yml:/etc/blackbox_exporter/config.yml:Z,ro
            capabilities:
              - cap_net_raw
            health:
              cmd: "/bin/wget --spider localhost:{{ blackbox_http_port }}"
          alertmanager:
            image: "quay.io/prometheus/alertmanager:v{{ alertmanager_version }}"
            user: "{{ alertmanager_uid }}:{{ monitoring_gid }}"
            command: >
              --config.file=/etc/alertmanager/alertmanager.yml
              --storage.path=/alertmanager
              --web.listen-address={{ alertmanager_web_listen_address }}
              --web.external-url={{ alertmanager_web_external_url }}
              --web.route-prefix={{ alertmanager_web_path }}
            volumes:
              - /etc/alertmanager:/etc/alertmanager:Z,ro
              - "{{ alertmanager_db_dir }}:/alertmanager:z"
            health:
              cmd: "/bin/wget --spider localhost:{{ alertmanager_http_port }}"
          grafana:
            image: "docker.io/grafana/grafana-oss:{{ grafana_version }}"
            ports:
              - "{{ grafana_http_port }}:{{ grafana_http_port }}"
            user: "{{ grafana_uid }}:{{ monitoring_gid }}"
            volumes:
              - "/etc/grafana:/etc/grafana:Z,ro"
              - "{{ grafana_data }}:/var/lib/grafana:z"
          domain-exporter:
            image: "docker.io/caarlos0/domain_exporter:v{{ domain_exporter_version }}"
            ports:
              - "{{ domain_exporter_http_port }}:{{ domain_exporter_http_port }}"
      ansible.builtin.include_role:
        name: infra.simple
        tasks_from: containers.yml
...
